<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Shirohida</title>
    <link href="http://bobyakov.org/atom.xml" rel="self" />
    <link href="http://bobyakov.org" />
    <id>http://bobyakov.org/atom.xml</id>
    <author>
        <name>Alexey Bobyakov</name>
        <email>claymore.ws@gmail.com</email>
    </author>
    <updated>2007-07-30T00:00:00Z</updated>
    <entry>
    <title>Windows Vista Credential Providers</title>
    <link href="http://bobyakov.org/2007/07/30/windows-vista-credential-providers/index.html" />
    <id>http://bobyakov.org/2007/07/30/windows-vista-credential-providers/index.html</id>
    <published>2007-07-30T00:00:00Z</published>
    <updated>2007-07-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>In Windows Vista Microsoft has adopted so called credential providers as a way to log into the system. Your custom <a href="http://en.wikipedia.org/wiki/Graphical_identification_and_authentication">GINA</a> library <a href="http://support.microsoft.com/kb/925520">won’t work</a> in Vista so you will have to write a COM component that implements <code>ICredentialProvider</code> and <code>ICredentialProviderCredential</code> interfaces. I found it pretty easy to write a custom credential provider (the one that works with electronic keys). There are a <a href="http://msdn.microsoft.com/en-us/magazine/cc163489.aspx">good introduction</a> into the new model, <a href="http://www.microsoft.com/en-us/download/details.aspx?id=4057">samples</a> and <a href="http://shellrevealed.com/files/folders/code_samples/entry1019.aspx">technical reference</a>.</p>]]></summary>
</entry>
<entry>
    <title>Context menu for column headers of .NET ListView</title>
    <link href="http://bobyakov.org/2008/07/13/context-menu-for-column-headers-of-net-listview/index.html" />
    <id>http://bobyakov.org/2008/07/13/context-menu-for-column-headers-of-net-listview/index.html</id>
    <published>2008-07-13T00:00:00Z</published>
    <updated>2008-07-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><code>ListView</code> doesn’t provide <code>ColumnHeaderMouseClick</code> event so I had to find a workaround to display context menu for column headers. There is a <a href="http://www.codeproject.com/Articles/23330/Handling-Right-Click-Events-in-ListView-Column-Hea" title="Handling Right-Click Events in ListView Column Headers">way</a> to do this by resorting to Windows API but my solution is easier.</p>
<!-- more -->

<p>Let’s say we’ve got a <code>ListView</code> control called <code>contentsListView</code> and two menus: <code>generalContextMenu</code> and <code>headerContextMenu</code>. <code>generalContextMenu</code> should be displayed when user right-clicks on an item and headerContextMenu should be displayed when he clicks on a column header.</p>
<p>Set the list view’s property <code>ContextMenuStrip</code> to <code>generalContextMenu</code>:</p>
<pre><code>contentListView.ContextMenuStrip = generalContextMenu;</code></pre>
<p>Add handler for <code>Opening</code> event of <code>generalContextMenu</code>:</p>
<pre><code>generalContextMenuStrip.Opening += generalContextMenu_Opening;</code></pre>
<p>I have played with debugger a bit and found out that <code>contentListView.GetItemAt</code> returns first visible item of the list even when we actually click on a column header. So, when we get some value this means we either clicked on an item or on a column header. Any list item is located below the header, so if the item <code>Position.Y</code> is less than <code>MousePosition.Y</code> then user clicked on a column header.</p>
<p>Here is the code for the handler:</p>
<pre class="sourceCode Cs"><code class="sourceCode cs"><span class="kw">private</span> <span class="dt">void</span> <span class="fu">generalContextMenu_Opening</span>(<span class="dt">object</span> sender, CancelEventArgs e)
{
	Point pt = contentListView.<span class="fu">PointToClient</span>(<span class="kw">new</span> <span class="fu">Point</span>(MousePosition.<span class="fu">X</span>, MousePosition.<span class="fu">Y</span>));
	ListViewItem item = contentListView.<span class="fu">GetItemAt</span>(pt.<span class="fu">X</span>, pt.<span class="fu">Y</span>);

	<span class="co">// Not an item or a column header</span>
	<span class="kw">if</span> (item == <span class="kw">null</span>)
	{
		e.<span class="fu">Cancel</span> = <span class="kw">true</span>;
		<span class="kw">return</span>;
	}

	<span class="co">// Is it a column header?</span>
	<span class="kw">if</span> (item.<span class="fu">Position</span>.<span class="fu">Y</span> &gt; pt.<span class="fu">Y</span>)
	{
		e.<span class="fu">Cancel</span> = <span class="kw">true</span>;
		headerContextMenu.<span class="fu">Show</span>(MousePosition);
	}
}</code></pre>]]></summary>
</entry>
<entry>
    <title>Hubot &amp; XMPP</title>
    <link href="http://bobyakov.org/2011/10/27/hubot-and-xmpp/index.html" />
    <id>http://bobyakov.org/2011/10/27/hubot-and-xmpp/index.html</id>
    <published>2011-10-27T00:00:00Z</published>
    <updated>2011-10-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Running Hubot on a Jabber server is fairly simple:</p>
<ol style="list-style-type: decimal">
<li>Install node.js;</li>
<li>Install npm;</li>
<li>Install redis;</li>
<li>Set up environment variables:
<ul>
<li><code>export HUBOT_XMPP_USERNAME=[JID]</code></li>
<li><code>export HUBOT_XMPP_PASSWORD=[Password]</code></li>
<li><code>export HUBOT_XMPP_ROOMS=[Room]</code></li>
</ul></li>
<li>Run Hubot: <code>bin/hubot -a xmpp</code></li>
</ol>]]></summary>
</entry>
<entry>
    <title>From Blogspot to Octopress/Github</title>
    <link href="http://bobyakov.org/2012/11/04/from-blogspot-to-octopress-slash-github/index.html" />
    <id>http://bobyakov.org/2012/11/04/from-blogspot-to-octopress-slash-github/index.html</id>
    <published>2012-11-04T00:00:00Z</published>
    <updated>2012-11-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I’ve finally moved my blog from Blogspot to Github pages. The blog is now powered by <a href="http://octopress.org/" title="Octopress">Octopress</a>. Blogspot was convient but for a developer there are several reasons to switch. Octopress generates a static website that can be deployed anywhere so you gain independence from a service provider. Your posts are Markdown files that can be authored in your favorite editor. The blog source is under version control. Another great feature: code syntax highlighting works out of the box.</p>]]></summary>
</entry>
<entry>
    <title>First Days with Go</title>
    <link href="http://bobyakov.org/2012/11/05/first-days-with-go/index.html" />
    <id>http://bobyakov.org/2012/11/05/first-days-with-go/index.html</id>
    <published>2012-11-05T00:00:00Z</published>
    <updated>2012-11-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I’ve seen articles about <a href="http://golang.org" title="The Go Programming Language">Go</a> programming language appearing on Hacker News a few times but I didn’t pay much attention to them. Yet another language with nothing special about it or so it looked. It’s changed with Rob Pike’s <a href="http://talks.golang.org/2012/splash.slide#1" title="Go at Google">recent talk</a>.</p>
<!-- more -->

<p>I decided to try it out in a simple program that I originally wrote in Python. The program takes CSV files with <a href="https://github.com/Claymore/wiki-japan-stat/tree/golang/data">data</a> about Japanese population fetched from official sites and produces a template for Russian Wikipedia. The program also uses an INI-like configuration file. You can see the original source <a href="https://github.com/Claymore/wiki-japan-stat/blob/master/generator.py">here</a>. It’s fairly straightforward, the only thing I had to do is to make CSV reader handle UTF-8 files by introducing <code>unicode_csv_reader</code> function.</p>
<p>I wanted the same functionality in a Go program. Reading CSV files seemed the easiest task to me so I started with it. Go standard library has a package to deal with such files, it’s called <code>encoding/csv</code>. Here is an example of how to use it:</p>
<pre class="sourceCode go"><code class="sourceCode go">file, err := os.Open(<span class="st">&quot;example.csv&quot;</span>)
<span class="kw">if</span> err != <span class="ot">nil</span> {
	log.Fatalln(<span class="st">&quot;Error:&quot;</span>, err)
}
<span class="kw">defer</span> file.Close()
reader := csv.NewReader(file)
<span class="kw">for</span> {
	record, err := reader.Read()
	<span class="kw">if</span> err == io.EOF {
		<span class="kw">break</span>
	} <span class="kw">else</span> <span class="kw">if</span> err != <span class="ot">nil</span> {
		log.Fatalln(<span class="st">&quot;Error:&quot;</span>, err)
	}
	fmt.Println(record)
}</code></pre>
<p>We open the file, command Go to close it when noone uses it anymore, create a <code>csv.Reader</code> object then read and print records line by line until we encounter end of file. Things to note: Go functions can return multiple values; you can defer execution of a function until the end of the block; Go has basic type inference (for example, <code>reader := csv.NewReader(file)</code> is a shortcut for <code>var reader csv.Reader = csv.NewReader(file)</code>). Go doesn’t have exceptions and it’s common idiom to return errors alongside function values. It makes code somewhat more verbose but it also makes clear when error will be handled.</p>
<p>The next stop was to read an INI-like configuration file. The standard library doesn’t have a package to read them but it was really easy to implement one myself. I took <code>encoding/csv</code> package <a href="http://golang.org/src/pkg/encoding/csv/reader.go">source code</a> and created my own package based on it. You can look at the result here: <a href="https://github.com/Claymore/go-config">go-config</a> at GitHub. Later I found out there are three third-party packages that do the same but all of them introduce Python’s <code>ConfigParser</code> API that doesn’t suit Go very well, in my opinion.</p>
<p>It was indeed fun, easy and straightforward as Rob’d claimed in his talk. Go promotes writing, documenting, testing and sharing packages: it has tools to automatically reformat your source code (<code>go fmt</code>), builtin testing library (<code>testing</code> package and <code>go test</code>), document extraction (<code>go doc</code>) and even to get, build and install third-party packages (<code>go get</code>) out of the box.</p>
<p>With all pieces in place I’d finished the <a href="https://github.com/Claymore/wiki-japan-stat/blob/golang/generator.go">program</a> and it’s almost as easy to read it as Python version.</p>]]></summary>
</entry>
<entry>
    <title>Git Configuration Tips</title>
    <link href="http://bobyakov.org/2012/11/05/git-configuration-tips/index.html" />
    <id>http://bobyakov.org/2012/11/05/git-configuration-tips/index.html</id>
    <published>2012-11-05T00:00:00Z</published>
    <updated>2012-11-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Probably the first thing you want to do after providing git with your name and email is to color its output. Open <code>~/.gitconfig</code> in your favorite editor and add following lines:</p>
<pre><code>[color]
	branch = auto
	diff = auto
	interactive = auto
	status = auto</code></pre>
<p>If you want to cut down on typing you can also use git aliases. Here is list of mine:</p>
<pre><code>[alias]
	st = status -s
	ci = commit
	cim = commit -m
	ciam = commit -a -m
	br = branch
	co = checkout
	df = diff
	lg = log -p
	au = add -u
	history = log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative
	# git svn related commands
	sup = !git svn fetch &amp;&amp; git svn rebase -l
	sci = svn dcommit</code></pre>]]></summary>
</entry>
<entry>
    <title>Oracle, VirtualBox, Docker and Mac OS X</title>
    <link href="http://bobyakov.org/2014/02/01/oracle-virtualbox-docker-osx/index.html" />
    <id>http://bobyakov.org/2014/02/01/oracle-virtualbox-docker-osx/index.html</id>
    <published>2014-02-01T00:00:00Z</published>
    <updated>2014-02-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>You might have heard of <a href="http://www.docker.io" title="Docker">Docker</a> by now. It’s a young but ambitious project that promises to package up your application as a portable and self-sufficient container ready to run in any environment. I already use Docker on my Linux boxes to spin several test instances of my web service. Let’s see if we can run it on Mac OS X.</p>
<!-- more -->

<p>The web service is a SOAP server that uses Oracle database to persist data. Users interact with the service via a web interface. The web service and the web interface are packaged as a container that exposes TCP port 80. So we need to set up a Docker server and an Oracle database instance. There isn’t native Docker server for OS X yet so we will use <a href="https://www.virtualbox.org/wiki/Downloads" title="VirualBox">VirtualBox</a> to run them.</p>
<p>The easiest way to run an Oracle database on OS X is to use a <a href="http://www.oracle.com/technetwork/database/enterprise-edition/databaseappdev-vm-161299.html" title="Oracle VM for developers">preconfigured virtual machine</a>. Install VirtualBox and import the machine.</p>
<p>The next step is to install tiny <a href="https://github.com/steeve/boot2docker" title="boot2docker">boot2docker</a> VM that runs a Docker server:</p>
<pre><code>$ mkdir boot2docker &amp;&amp; cd boot2docker
$ curl https://raw.github.com/steeve/boot2docker/master/boot2docker &gt; boot2docker
$ chmod +x boot2docker
$ ./boot2docker init
$ ./boot2docker up
$ ./boot2docker ssh</code></pre>
<p>The last command logs us into the virtual machine. boot2docker doesn’t persist containers by default but we can change this:</p>
<pre><code>$ su -
$ fdisk /dev/sda
n
p
1


w
$ mkfs.ext4 /dev/sda1
$ exit</code></pre>
<p>Now restart the boot2docker VM:</p>
<pre><code>$ ./boot2docker restart</code></pre>
<p>At this point we can pull and run docker containers but there are a few problems:</p>
<ol style="list-style-type: decimal">
<li>boot2docker doesn’t expose container ports to the host machine;</li>
<li>docker containers can’t access the Oracle DB.</li>
</ol>
<p>The first problem is easy. Open VirtualBox GUI, stop the boot2docker VM and set up it to forward ports to their host targets.</p>
<p>For the other one we will have to add a new network interface to the boot2docker VM and to the Oracle VM. Set up both to use internal network mode. We will also have to configure VirtualBox DHCP server. Here is an example how to do it:</p>
<pre><code>$ VBoxManage dhcpserver add --netname intnet
    --ip 10.0.3.1
    --netmask 255.255.255.0
    --lowerip 10.0.3.2
    --upperip 10.0.3.100
    --enable</code></pre>
<p>We add a DHCP server for internal network called ‘intnet’ with 10.0.3.1 as the gateway IP. The DHCP server assigns clients addresses starting from 10.0.3.2 to 10.0.3.100.</p>
<p>The boot2docker VM can use a dynamic IP in the internal network. The Oracle VM ought to have a static address so boot the VM and use the <code>system-config-network-tui</code> utility to assign a static IP (for example, 10.0.3.101) to <code>eth0</code> network interface.</p>
<p>Now applications in our containers can connect to the database:</p>
<pre><code>$ docker run -d -p 8080:80 -e DB_HOST=10.0.3.101 -e DB_USER=example -e DB_PASSWORD=example example-app-container</code></pre>
<p>With port forwarding set up to forward TCP port 8080 to host port 8080 we can access the web app using this URL:</p>
<pre><code>http://localhost:8080</code></pre>]]></summary>
</entry>

</feed>
